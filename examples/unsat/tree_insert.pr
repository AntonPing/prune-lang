datatype Tree where
| Node(Tree, Int, Tree)
| Empty
end

function insert(tree: Tree, x: Int) -> Tree
begin
    match tree with
    | Node(left, y, right) =>
        if @icmplt(x, y) then
            Node(insert(left, x), y, right)
        else if @icmpgt(x, y) then
            Node(left, y, insert(right, x))
        else tree
    | Empty => Node(Empty, x, Empty)
    end
end

function is_sorted(tree: Tree) -> Bool
begin
    match tree with
    | Node(left, y, right) =>
        @band(is_sorted_left(left, y), is_sorted_right(right, y))
    | Empty => true
    end
end

function is_sorted_left(tree: Tree, x: Int) -> Bool
begin
    match tree with
    | Node(left, y, right) =>
        @band(@icmplt(y, x), @band(is_sorted_left(left, y), is_sorted_right(right, y)))
    | Empty => true
    end
end

function is_sorted_right(tree: Tree, x: Int) -> Bool
begin
    match tree with
    | Node(left, y, right) =>
        @band(@icmpgt(y, x), @band(is_sorted_left(left, y), is_sorted_right(right, y)))
    | Empty => true
    end
end

predicate always_sorted(tree: Tree, x: Int)
begin
    and(
        is_sorted(tree) = true,
        is_sorted(insert(tree, x)) = false,
    )
end

entry always_sorted(10, 51, 1)