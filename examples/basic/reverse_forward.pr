datatype IntList where
| Cons(Int, IntList)
| Nil
end

function reverse(xs: IntList) -> IntList
begin
    reverse_help(xs, Nil)
end

function reverse_help(xs: IntList, ys: IntList) -> IntList
begin
    match xs with
    | Cons(head, tail) => reverse_help(tail, Cons(head, ys))
    | Nil => ys
    end
end

function rev_nat_list(n: Int) -> IntList
begin
    if n == 0 then
        Nil
    else
        Cons(n, rev_nat_list(n - 1))
end

predicate reverse_forward(ys: IntList)
begin
    fresh(xs) (
        and(
            ys = reverse(xs),
            xs = rev_nat_list(100),
        ) 
    )
end

query reverse_forward(depth_step=50, depth_limit=1000, answer_limit=1)