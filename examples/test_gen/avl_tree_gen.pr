datatype AVLTree where
| Node(AVLTree, Int, AVLTree)
| Empty
end

datatype OptionInt where
| Some(Int)
| None
end

function is_balanced(tree: AVLTree) -> Bool
begin
    match is_balanced_help(tree) with
    | Some(d) => true 
    | None => false
    end
end

function is_balanced_help(tree: AVLTree) -> OptionInt
begin
    match tree with
    | Node(left, x, right) => 
        match is_balanced_help(left) with
        | Some(l_d) => match is_balanced_help(right) with
            | Some(r_d) => 
                let diff = @isub(l_d, r_d);
                if @band(@icmpge(diff, -1), @icmple(diff, 1)) then
                    if @icmplt(l_d, r_d) then 
                        Some(@iadd(r_d, 1))
                    else
                        Some(@iadd(l_d, 1))
                else
                    None
            | None => None
            end
        | None => None
        end
    | Empty => Some(0)
    end
end

function is_sorted(tree: AVLTree) -> Bool
begin
    match tree with
    | Node(left, x, right) =>
        @band(is_sorted_max(left, x), is_sorted_min(right, x))
    | Empty => true
    end
end

function is_sorted_min(tree: AVLTree, min: Int)  -> Bool
begin
    match tree with
    | Node(left, x, right) =>
        @band(
            @icmpgt(x, min),
            @band(is_sorted_min_max(left, min, x), is_sorted_min(right, x))
        )
    | Empty => true
    end
end

function is_sorted_max(tree: AVLTree, max: Int)  -> Bool
begin
    match tree with
    | Node(left, x, right) =>
        @band(
            @icmplt(x, max),
            @band(is_sorted_max(left, x), is_sorted_min_max(right, x, max))
        )
    | Empty => true
    end
end

function is_sorted_min_max(tree: AVLTree, min: Int, max: Int)  -> Bool
begin
    match tree with
    | Node(left, x, right) =>
        @band(
            @band(@icmpgt(x, min), @icmplt(x, max)),
            @band(is_sorted_min_max(left, min, x), is_sorted_min_max(right, x, max))
        )
    | Empty => true
    end
end	

predicate gen_sorted_balanced(tree: AVLTree)
begin
    and(
        is_sorted(tree) = true,
        is_balanced(tree) = true,
    )
end

query gen_sorted_balanced(depth_step=5, depth_limit=200, answer_limit=100)