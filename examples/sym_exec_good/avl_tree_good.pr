datatype AVLTree where
| Node(AVLTree, Int, AVLTree)
| Empty
end

datatype OptionInt where
| Some(Int)
| None
end

function insert(tree: AVLTree, x: Int) -> AVLTree
begin
    match tree with
    | Node(left, y, right) =>
        condition
        | x < y =>
            rebalance(Node(insert(left, x), y, right))
        | x > y =>
            rebalance(Node(left, y, insert(right, x)))
        | x == y =>
            tree
        end
    | Empty => Node(Empty, x, Empty)
    end
end

function depth(tree: AVLTree) -> Int
begin
    match tree with
    | Node(left, x, right) => 
        let l_d = depth(left);
        let r_d = depth(right);
        if l_d < r_d then r_d + 1 else l_d + 1
    | Empty => 0
    end
end

function balance_factor(tree: AVLTree) -> Int
begin
    match tree with
    | Node(left, x, right) => depth(left) - depth(right)
    | Empty => 0
    end
end

function rebalance(tree: AVLTree) -> AVLTree
begin
    let bf = balance_factor(tree);
    condition
    | bf >= -1 && bf <= 1 =>
        tree
    | bf <= -2 =>
        match tree with
        | Node(left, x, right) => 
            if balance_factor(right) <= 0 then
                rotate_left(tree)
            else
                rotate_left(Node(left, x, rotate_right(right)))
        | Empty => fail!
        end
    | bf >= 2 =>
        match tree with
        | Node(left, x, right) => 
            if balance_factor(left) >= 0 then
                rotate_right(tree)
            else
                rotate_right(Node(rotate_left(left), x, right))
        | Empty => fail!
        end
    end
end

function rotate_left(tree: AVLTree) -> AVLTree
begin
    let Node(left, x, Node(r_left, r_x, r_right)) = tree;
    Node(Node(left, x, r_left), r_x, r_right)
end

function rotate_right(tree: AVLTree) -> AVLTree
begin
    let Node(Node(l_left, l_x, l_right), x, right) = tree;
    Node(l_left, l_x, Node(l_right, x, right))
end

function is_balanced(tree: AVLTree) -> Bool
begin
    match is_balanced_help(tree) with
    | Some(d) => true 
    | None => false
    end
end

function is_balanced_help(tree: AVLTree) -> OptionInt
begin
    match tree with
    | Node(left, x, right) => 
        match is_balanced_help(left) with
        | Some(l_d) => match is_balanced_help(right) with
            | Some(r_d) => 
                let diff = l_d - r_d;
                if diff >= -1 && diff <= 1 then
                    if l_d < r_d then 
                        Some(r_d + 1)
                    else
                        Some(l_d + 1)
                else
                    None
            | None => None
            end
        | None => None
        end
    | Empty => Some(0)
    end
end

function is_sorted(tree: AVLTree) -> Bool
begin
    match tree with
    | Node(left, x, right) =>
        is_sorted_max(left, x) && is_sorted_min(right, x)
    | Empty => true
    end
end

function is_sorted_min(tree: AVLTree, min: Int) -> Bool
begin
    match tree with
    | Node(left, x, right) =>
        x > min &&
        is_sorted_min_max(left, min, x) && is_sorted_min(right, x)
    | Empty => true
    end
end

function is_sorted_max(tree: AVLTree, max: Int) -> Bool
begin
    match tree with
    | Node(left, x, right) =>
        x < max &&
        is_sorted_max(left, x) && is_sorted_min_max(right, x, max)
    | Empty => true
    end
end

function is_sorted_min_max(tree: AVLTree, min: Int, max: Int) -> Bool
begin
    match tree with
    | Node(left, x, right) =>
        x > min && x < max &&
        is_sorted_min_max(left, min, x) && is_sorted_min_max(right, x, max)
    | Empty => true
    end
end

predicate keep_sorted_and_balanced(tree: AVLTree, x: Int)
begin
    fresh(res) (
        and(
            is_sorted(tree) = true,
            is_balanced(tree) = true,
            res = insert(tree, x),
            or(
                is_sorted(res) = false,
                is_balanced(res) = false,
            ),
        )
    )
end

query keep_sorted_and_balanced(depth_step=5, depth_limit=50, answer_limit=1)